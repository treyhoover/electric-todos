/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as HealthRouteImport } from './routes/health'
import { Route as IndexRouteImport } from './routes/index'
import { ServerRoute as ApiTodosServerRouteImport } from './routes/api/todos'
import { ServerRoute as ApiShapeProxyServerRouteImport } from './routes/api/shape-proxy'
import { ServerRoute as ApiConfigServerRouteImport } from './routes/api/config'
import { ServerRoute as ApiTodosIdServerRouteImport } from './routes/api/todos.$id'
import { ServerRoute as ApiConfigIdServerRouteImport } from './routes/api/config.$id'

const rootServerRouteImport = createServerRootRoute()

const HealthRoute = HealthRouteImport.update({
  id: '/health',
  path: '/health',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiTodosServerRoute = ApiTodosServerRouteImport.update({
  id: '/api/todos',
  path: '/api/todos',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiShapeProxyServerRoute = ApiShapeProxyServerRouteImport.update({
  id: '/api/shape-proxy',
  path: '/api/shape-proxy',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiConfigServerRoute = ApiConfigServerRouteImport.update({
  id: '/api/config',
  path: '/api/config',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiTodosIdServerRoute = ApiTodosIdServerRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => ApiTodosServerRoute,
} as any)
const ApiConfigIdServerRoute = ApiConfigIdServerRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => ApiConfigServerRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/health': typeof HealthRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/health': typeof HealthRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/health': typeof HealthRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/health'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/health'
  id: '__root__' | '/' | '/health'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  HealthRoute: typeof HealthRoute
}
export interface FileServerRoutesByFullPath {
  '/api/config': typeof ApiConfigServerRouteWithChildren
  '/api/shape-proxy': typeof ApiShapeProxyServerRoute
  '/api/todos': typeof ApiTodosServerRouteWithChildren
  '/api/config/$id': typeof ApiConfigIdServerRoute
  '/api/todos/$id': typeof ApiTodosIdServerRoute
}
export interface FileServerRoutesByTo {
  '/api/config': typeof ApiConfigServerRouteWithChildren
  '/api/shape-proxy': typeof ApiShapeProxyServerRoute
  '/api/todos': typeof ApiTodosServerRouteWithChildren
  '/api/config/$id': typeof ApiConfigIdServerRoute
  '/api/todos/$id': typeof ApiTodosIdServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/config': typeof ApiConfigServerRouteWithChildren
  '/api/shape-proxy': typeof ApiShapeProxyServerRoute
  '/api/todos': typeof ApiTodosServerRouteWithChildren
  '/api/config/$id': typeof ApiConfigIdServerRoute
  '/api/todos/$id': typeof ApiTodosIdServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths:
    | '/api/config'
    | '/api/shape-proxy'
    | '/api/todos'
    | '/api/config/$id'
    | '/api/todos/$id'
  fileServerRoutesByTo: FileServerRoutesByTo
  to:
    | '/api/config'
    | '/api/shape-proxy'
    | '/api/todos'
    | '/api/config/$id'
    | '/api/todos/$id'
  id:
    | '__root__'
    | '/api/config'
    | '/api/shape-proxy'
    | '/api/todos'
    | '/api/config/$id'
    | '/api/todos/$id'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiConfigServerRoute: typeof ApiConfigServerRouteWithChildren
  ApiShapeProxyServerRoute: typeof ApiShapeProxyServerRoute
  ApiTodosServerRoute: typeof ApiTodosServerRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/health': {
      id: '/health'
      path: '/health'
      fullPath: '/health'
      preLoaderRoute: typeof HealthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/todos': {
      id: '/api/todos'
      path: '/api/todos'
      fullPath: '/api/todos'
      preLoaderRoute: typeof ApiTodosServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/shape-proxy': {
      id: '/api/shape-proxy'
      path: '/api/shape-proxy'
      fullPath: '/api/shape-proxy'
      preLoaderRoute: typeof ApiShapeProxyServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/config': {
      id: '/api/config'
      path: '/api/config'
      fullPath: '/api/config'
      preLoaderRoute: typeof ApiConfigServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/todos/$id': {
      id: '/api/todos/$id'
      path: '/$id'
      fullPath: '/api/todos/$id'
      preLoaderRoute: typeof ApiTodosIdServerRouteImport
      parentRoute: typeof ApiTodosServerRoute
    }
    '/api/config/$id': {
      id: '/api/config/$id'
      path: '/$id'
      fullPath: '/api/config/$id'
      preLoaderRoute: typeof ApiConfigIdServerRouteImport
      parentRoute: typeof ApiConfigServerRoute
    }
  }
}

interface ApiConfigServerRouteChildren {
  ApiConfigIdServerRoute: typeof ApiConfigIdServerRoute
}

const ApiConfigServerRouteChildren: ApiConfigServerRouteChildren = {
  ApiConfigIdServerRoute: ApiConfigIdServerRoute,
}

const ApiConfigServerRouteWithChildren = ApiConfigServerRoute._addFileChildren(
  ApiConfigServerRouteChildren,
)

interface ApiTodosServerRouteChildren {
  ApiTodosIdServerRoute: typeof ApiTodosIdServerRoute
}

const ApiTodosServerRouteChildren: ApiTodosServerRouteChildren = {
  ApiTodosIdServerRoute: ApiTodosIdServerRoute,
}

const ApiTodosServerRouteWithChildren = ApiTodosServerRoute._addFileChildren(
  ApiTodosServerRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  HealthRoute: HealthRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiConfigServerRoute: ApiConfigServerRouteWithChildren,
  ApiShapeProxyServerRoute: ApiShapeProxyServerRoute,
  ApiTodosServerRoute: ApiTodosServerRouteWithChildren,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
